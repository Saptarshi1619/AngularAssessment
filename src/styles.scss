
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the theme object.
$Assessment-theme: mat.define-theme((
  color: (
    theme-type: light,
    primary: mat.$azure-palette,
    tertiary: mat.$blue-palette,
  ),
  density: (
    scale: 0,
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
:root {
  @include mat.all-component-themes($Assessment-theme);
}

// Comment out the line below if you want to use the pre-defined typography utility classes.
// For more information: https://material.angular.io/guide/typography#using-typography-styles-in-your-application.
// @include mat.typography-hierarchy($Assessment-theme);

// Comment out the line below if you want to use the deprecated `color` inputs.
// @include mat.color-variants-backwards-compatibility($Assessment-theme);

// Define the theme object.
$Assessment-theme: mat.define-theme((
  color: (
    theme-type: light,
    primary: mat.$azure-palette,
    tertiary: mat.$blue-palette,
  ),
  density: (
    scale: 0,
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
:root {
  @include mat.all-component-themes($Assessment-theme);
}

// Comment out the line below if you want to use the pre-defined typography utility classes.
// For more information: https://material.angular.io/guide/typography#using-typography-styles-in-your-application.
// @include mat.typography-hierarchy($Assessment-theme);

// Comment out the line below if you want to use the deprecated `color` inputs.
// @include mat.color-variants-backwards-compatibility($Assessment-theme);
/* You can add global styles to this file, and also import other style files */
@import '@fortawesome/fontawesome-free/css/all.css';
@import 'mdb-angular-ui-kit/assets/scss/mdb.scss';

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }


// src/styles.scss

// Define theme colors
$primary-blue: #a6c8ff;
$secondary-blue: #81b3ff;
$highlight-blue: #4d90d6;
$text-dark: #333;
$text-light: #fff;

// Global styles
body {
  font-family: Arial, sans-serif;
  background-color: $primary-blue;
  color: $text-dark;
  line-height: 1.6;
}

h1, h2, h3 {
  color: $highlight-blue;
}

button {
  background-color: $highlight-blue;
  color: $text-light;
}

/* Global theme colors using CSS variables */
:root {
  /* Light Blue Colors */
  --primary-blue: #a6c8ff;    /* Light blue background */
  --secondary-blue: #81b3ff;  /* Secondary blue (darker than primary) */
  --highlight-blue: #4d90d6;  /* Highlighted blue (for buttons, links) */
  --text-dark: #333;          /* Dark text color for readability */
  --text-light: #fff;         /* Light text color */
}

/* Global styles */
body {
  font-family: Arial, sans-serif;
  background-color: var(--primary-blue);
  color: var(--text-dark);
  line-height: 1.6;
}

h1, h2, h3 {
  color: var(--highlight-blue);
}

button {
  background-color: var(--highlight-blue);
  color: var(--text-light);
}
